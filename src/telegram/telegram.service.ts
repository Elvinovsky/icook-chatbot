import { Ctx, Message, On, Start, Update } from 'nestjs-telegraf';
import { Scenes, Telegraf } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { ConfigType } from '../infrastructure/configuration/getConfig';
import { RecipeGeneratorService } from '../chatgpt/recipe-generator.service';

type Context = Scenes.SceneContext;

@Update()
export class TelegramService extends Telegraf<Context> {
    constructor(
        private configService: ConfigService<ConfigType>,
        private readonly recipeGenerator: RecipeGeneratorService,
    ) {
        super(configService.get('TELEGRAM_TOKEN', { infer: true }));
    }

    @Start()
    onStart(@Ctx() ctx: Context) {
        ctx.replyWithHTML(
            `<b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üçª</b> –Ø - —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–ø–æ–≤–∞—Ä! üç≥ –î–∞–≤–∞–π-–∫–∞ —Å–¥–µ–ª–∞–µ–º —á—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–µ–Ω—å–∫–æ–µ –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ —É —Ç–µ–±—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ. –ü—Ä–æ—Å—Ç–æ –∫–∏–Ω—å –º–Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é. ü•¶üçÖ –ü–æ–µ—Ö–∞–ª–∏, –≥–æ—Ç–æ–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ! üçΩÔ∏èüòú`,
        ).then((r) => r.text);
    }

    @On('text')
    async onMessage(@Message('text') message: string, @Ctx() ctx: Context) {
        const waitMessage = await ctx.reply('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...üïë');

        const observablePromise = this.recipeGenerator.generateResponse(message);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä 'await' –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Promise
        const observable = await observablePromise;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä 'subscribe' –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Observable
        observable.subscribe((response: string) => {
            ctx.telegram.editMessageText(ctx.chat.id, waitMessage.message_id, undefined, response);
        });
    }
}
